name: CI

on:
  push:
    branches:
      - master
      - feature/ci

    tags:
      - v[0-9]+.*
      - testing-ci.*

  pull_request:

jobs:
  lint:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install rust
      run: |
        rustup update stable && rustup default stable
        rustup component add clippy

    - name: Install dependencies
      run: sudo apt-get install libdbus-1-dev

    - name: Run clippy
      run: cargo clippy --all --all-features -- -Dwarnings

  test:
    name: Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        toolchain: [stable, nightly]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install rust
      run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

    - name: Install dependencies
      run: sudo apt-get install libdbus-1-dev

    - name: Build
      run: cargo build --all

    - name: Test
      run: cargo test --all

  build-bin:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')

    name: Build binary package
    runs-on: ubuntu-16.04
    needs: [lint, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install rust
      run: rustup update stable && rustup default stable

    - name: Install dependencies
      run: sudo apt-get install libdbus-1-dev

    - name: Build package
      run: ./pkg/bin/makebin

    - name: Prepare release
      run: mkdir release && mv pkg/bin/*.tar.xz release

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: binary-latest
        path: release

  build-deb:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')

    name: Build deb package
    runs-on: ubuntu-16.04
    needs: [lint, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install rust
      run: rustup update stable && rustup default stable

    - name: Install dependencies
      run: sudo apt-get install debhelper fakeroot dpkg-sig libdbus-1-dev

    - name: Build package
      run: ./pkg/deb/makedeb

    - name: Sign package
      env:
        GPG_KEY_ID: 56C464BAAC421453
        GPG_KEY: ${{ secrets.SURFACE_GPG_KEY }}
      run: |
        # import GPG key
        echo "$GPG_KEY" | base64 -d | gpg --import --no-tty --batch --yes
        export GPG_TTY=$(tty)
        # sign package
        cd pkg/deb && dpkg-sig -g "--batch --no-tty" --sign builder -k $GPG_KEY_ID ./*.deb
    - name: Prepare release
      run: mkdir release && mv pkg/deb/*.deb release

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: debian-latest
        path: release

  build-f31:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')

    name: Build Fedora 31 package
    runs-on: ubuntu-latest
    needs: [lint, test]
    container: fedora:31

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install build dependencies
      run: |
        dnf distro-sync -y
        dnf install -y rpmdevtools rpm-sign 'dnf-command(builddep)'
        dnf builddep -y pkg/fedora/surface-dtx-daemon.spec

    - name: Build package
      run: |
        cd pkg/fedora
        # Build the .rpm packages
        ./makerpm

    - name: Sign packages
      env:
        GPG_KEY_ID: 56C464BAAC421453
        GPG_KEY: ${{ secrets.SURFACE_GPG_KEY }}
      run: |
        cd pkg/fedora/out/x86_64

        # import GPG key
        echo "$GPG_KEY" | base64 -d | gpg --import --no-tty --batch --yes

        # sign package
        rpm --resign *.rpm --define "_gpg_name $GPG_KEY_ID"

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: fedora-31-latest
        path: pkg/fedora/out/x86_64

  build-f30:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')

    name: Build Fedora 30 package
    runs-on: ubuntu-latest
    needs: [lint, test]
    container: fedora:30

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install build dependencies
      run: |
        dnf distro-sync -y
        dnf install -y rpmdevtools rpm-sign 'dnf-command(builddep)'
        dnf builddep -y pkg/fedora/surface-dtx-daemon.spec

    - name: Build package
      run: |
        cd pkg/fedora
        # Build the .rpm packages
        ./makerpm

    - name: Sign packages
      env:
        GPG_KEY_ID: 56C464BAAC421453
        GPG_KEY: ${{ secrets.SURFACE_GPG_KEY }}
      run: |
        cd pkg/fedora/out/x86_64

        # import GPG key
        echo "$GPG_KEY" | base64 -d | gpg --import --no-tty --batch --yes

        # sign package
        rpm --resign *.rpm --define "_gpg_name $GPG_KEY_ID"

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: fedora-30-latest
        path: pkg/fedora/out/x86_64

  release:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')

    name: Publish release
    needs: [build-bin, build-deb, build-f31, build-f30]
    runs-on: ubuntu-latest

    steps:
    - name: Download binary artifacts
      uses: actions/download-artifact@v1
      with:
        name: binary-latest

    - name: Download Debian artifacts
      uses: actions/download-artifact@v1
      with:
        name: debian-latest

    - name: Download Fedora 31 artifacts
      uses: actions/download-artifact@v1
      with:
        name: fedora-31-latest

    - name: Download Fedora 30 artifacts
      uses: actions/download-artifact@v1
      with:
        name: fedora-30-latest

    - name: Upload assets
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./*-latest/*
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
